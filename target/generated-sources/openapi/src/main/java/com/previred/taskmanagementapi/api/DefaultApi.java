/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.previred.taskmanagementapi.api;

import com.previred.taskmanagementapi.model.JwtResponse;
import com.previred.taskmanagementapi.model.LoginRequest;
import com.previred.taskmanagementapi.model.Task;
import com.previred.taskmanagementapi.model.TaskRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-12T12:31:35.308666-05:00[America/Lima]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Default", description = "the Default API")
public interface DefaultApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/login : Authenticate user and return JWT
     *
     * @param loginRequest  (required)
     * @return JWT token (status code 200)
     *         or Invalid credentials (status code 401)
     */
    @Operation(
        operationId = "login",
        summary = "Authenticate user and return JWT",
        responses = {
            @ApiResponse(responseCode = "200", description = "JWT token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JwtResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid credentials")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<JwtResponse> login(
        @Parameter(name = "LoginRequest", description = "", required = true) @Valid @RequestBody LoginRequest loginRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tasks : List all tasks
     *
     * @return List of tasks (status code 200)
     */
    @Operation(
        operationId = "tasksGet",
        summary = "List all tasks",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of tasks", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Task.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Task>> tasksGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"userId\" : 6, \"status\" : \"PENDING\" }, { \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"userId\" : 6, \"status\" : \"PENDING\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /tasks/{id} : Delete task by ID
     *
     * @param id  (required)
     * @return Task deleted (status code 204)
     */
    @Operation(
        operationId = "tasksIdDelete",
        summary = "Delete task by ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Task deleted")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tasks/{id}"
    )
    
    default ResponseEntity<Void> tasksIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tasks/{id} : Get task by ID
     *
     * @param id  (required)
     * @return Task found (status code 200)
     */
    @Operation(
        operationId = "tasksIdGet",
        summary = "Get task by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Task found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Task> tasksIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"userId\" : 6, \"status\" : \"PENDING\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /tasks/{id} : Update task by ID
     *
     * @param id  (required)
     * @param taskRequest  (required)
     * @return Task updated (status code 200)
     */
    @Operation(
        operationId = "tasksIdPut",
        summary = "Update task by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Task updated")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tasks/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> tasksIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "TaskRequest", description = "", required = true) @Valid @RequestBody TaskRequest taskRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /tasks : Create a new task
     *
     * @param taskRequest  (required)
     * @return Task created (status code 201)
     */
    @Operation(
        operationId = "tasksPost",
        summary = "Create a new task",
        responses = {
            @ApiResponse(responseCode = "201", description = "Task created")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tasks",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> tasksPost(
        @Parameter(name = "TaskRequest", description = "", required = true) @Valid @RequestBody TaskRequest taskRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
